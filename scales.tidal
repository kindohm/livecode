bps (120/120)

let remPos num den = if x<0 then x+den else x where x = rem num den
    scaleElt scale n = fromIntegral . (scale !!) $ fromIntegral $ remPos n (fromIntegral $ length scale)
    scaleOctave scale n = (12 *) . fromIntegral . floor . ((fromIntegral n) /) $ fromIntegral $ length scale
    sc s n = scaleOctave s n + scaleElt s n
    ionian = [0,2,4,5,7,9,11]
    aeolian = [0,2,3,5,7,8,10]
    locrian = [0,1,3,5,6,8,10]
    phryg = [0,1,3,5,7,8,10]
    lydian = [0,2,4,6,7,9,11]
    enig = [0,1,3,5,6,8,10,11]
    minor = [0,3,7]
    major = [0,4,7]
    nine = [0,4,7,10,14]
    ninesus4 = [0,5,7,10,14]
    add9 = [0,4,7,14]
    madd9 = [0,3,7,14]
    maj9 = [0,4,7,11,14]
    m9 = [0,3,7,10,14]
    sus2 = [0,2,7]
    sus4 = [0,5,7]
    seven = [0,4,7,10]
    m7 = [0,3,7,10]
    eleven = [0,4,7,10,14,17]
    m11 = [0,3,7,10,14,17]
    thirteen = [0,4,7,10,14,21]
    m13 = [0,3,7,10,14,21]
    runUpOneOctave = run $ length ionian
    runUpTwoOctaves = run $ 2 * length ionian
    runUpThreeOctaves = run $ 3 * length ionian
    runUpAndDown = append runUpTwoOctaves $ (+1) <$> rev runUpTwoOctaves
    scramble p = within (0.25, 0.5) (0.25 <~) $ within (0.5,1) (1.25 ~>) $ within (0, 0.5) (0.5 ~>) $ within (0.25, 0.75) (0.75 <~) $ p
    mel' scale runSize f cycles p = note (preplace(1,cycles) p (f $ sc scale <$> run runSize))
    melOld scale runSize p = note (preplace(1,1) p (sc scale <$> run runSize))
    mel scale runSize p = mel' scale runSize (scramble) 4 p

bps (100/120)

brute $ slow 2 $ degrade $ foldEvery [2,3,4] (1.25 ~>) $ (|+| note "38") $ mel m13 16 "0*16"

brute silence

d1 $ stack [
sound (samples "doru*16?" (run 20)) |+| cut "-1",
slow 4 $ sound "k(3,8) ~ ~ ~" ]
hush
d1 $ slow 2 $ up (sc ionian <$> runUpAndDown) |+| sound "sq"

d1 $ foldEvery [2,3,4] (5.25 <~) $ sound "la*8?"
|+| up (density 3 $ sometimes ((+12) <$>) $ ((subtract 24) <$>) $ sc lydian <$> runUpOneOctave)

d2 $ foldEvery [2,3,4] (7.25 ~>) $ sound "{la ~ la/2}%8"
|+| up (density 2.5 $ sometimes ((+12) <$>) $ sc lydian <$> runUpTwoOctaves)

keys $ whenmod 30 20 (density 1.2) $ whenmod 18 14 (const $ note "~") $
(|+| note "42") $ note (degradeBy 0.1 $ foldEvery [3] (density 2) $ slow 4 $ foldEvery [2,3,4] (7.25 ~>) $
sometimes ((+24) <$>) $ rarely (rev) $ sc lydian <$> run 16)

bd $ whenmod 30 20 (density 1.2) $ whenmod 12 9 (const $ note "~") $ note (degradeBy 0.3 $ foldEvery [2,3] (density 2) $ foldEvery [2,3,4] (7.25 ~>) $
rarely (rev) $ "{0 1 2 3 4 5 6 7 8 9 10 11 12}%4")

bd silence
keys silence

d1 silence

brute silence
