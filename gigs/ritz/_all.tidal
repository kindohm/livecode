import Sound.Tidal.MIDI.Output
import Sound.Tidal.MidiRack2
keyStreams <- midiproxy 1 "Scarlett 18i8 USB" [(rack, 1),(rack, 2),(rack, 3),(rack, 4),(rack, 5),(rack, 6),(rack, 7),(rack, 8),(rack, 9),(rack, 10),(rack, 11),(rack, 12),(rack, 13),(rack, 14),(rack, 15),(rack, 16)]
[m,k2,k3,k4,k5,k6,k7,k8,nord,k10,k11,k12,k13,brute,bass,keys] <- sequence keyStreams


let rip a b p = within (0.25, 0.75) (slow 2 . rev . stut 8 a b) p
    rip' a b c d e p = within (a, b) (slow 2 . rev . stut c d e) p
    spike p = ((|+| delaytime (scale 0.001 0.3 $ slow 7.1 sine1)) . (|+| delayfeedback (scale 0.7 0.99 $ slow 6.71 sine1))) $ p
    spike' p = (|+| delay "0.3") $ spike $ p
    ghost'' a f p = superimpose (((a/2 + a*2) ~>) . f) $ superimpose (((a + a/2) ~>) . f) $ p
    ghost' a p = ghost'' a ((|*| gain "0.7") . (|=| end "0.2") . (|*| speed "1.25")) p
    ghost p = ghost' 0.125 p
    jit start amount p = within (start, (start + 0.5)) (trunc (amount)) p
    gtfo p = (const $ sound "~") p
    gtfo_mate p = (const $ note "~") p

    let remPos num den = if x<0 then x+den else x where x = rem num den
        scaleElt scale n = fromIntegral . (scale !!) $ fromIntegral $ remPos n (fromIntegral $ length scale)
        scaleOctave scale n = (12 *) . fromIntegral . floor . ((fromIntegral n) /) $ fromIntegral $ length scale
        sc s n = scaleOctave s n + scaleElt s n
        ionian = [0,2,4,5,7,9,11]
        aeolian = [0,2,3,5,7,8,10]
        locrian = [0,1,3,5,6,8,10]
        phryg = [0,1,3,5,7,8,10]
        lydian = [0,2,4,6,7,9,11]
        enig = [0,1,3,5,6,8,10,11]
        minor = [0,3,7]
        major = [0,4,7]
        nine = [0,4,7,10,14]
        ninesus4 = [0,5,7,10,14]
        add9 = [0,4,7,14]
        madd9 = [0,3,7,14]
        maj9 = [0,4,7,11,14]
        m9 = [0,3,7,10,14]
        sus2 = [0,2,7]
        sus4 = [0,5,7]
        seven = [0,4,7,10]
        m7 = [0,3,7,10]
        eleven = [0,4,7,10,14,17]
        m11 = [0,3,7,10,14,17]
        thirteen = [0,4,7,10,14,21]
        m13 = [0,3,7,10,14,21]
        runUpOneOctave = run $ length ionian
        runUpTwoOctaves = run $ 2 * length ionian
        runUpThreeOctaves = run $ 3 * length ionian
        runUpAndDown = append runUpTwoOctaves $ (+1) <$> rev runUpTwoOctaves
        scramble p = within (0.25, 0.5) (0.25 <~) $ within (0.5,1) (1.25 ~>) $ within (0, 0.5) (0.5 ~>) $ within (0.25, 0.75) (0.75 <~) $ p
        mel' scale runSize f cycles p = note (preplace(1,cycles) p (f $ sc scale <$> run runSize))
        melOld scale runSize p = note (preplace(1,1) p (sc scale <$> run runSize))
        mel scale runSize p = mel' scale runSize (scramble) 4 p
































-- 1 (444)
bps (100/120)

d1 $ foldEvery [3,4] (0.25 <~) $
every 4 (chop 4) $
every 5 (gap 4) $
every 6 (|+| coarse "32 16 24") $
every 7 (rip 0.2 0.1) $
every 8 (spike') $
whenmod 5 3 (jux (iter 4)) $
whenmod 10 8 (|*| speed "0.9") $
stack [
sound "[~ sub/3] ~ ~ ~",
jux (iter 8) $ sound (samples "{ch*4 ~ ~}%4" "0"),
rarely (stut' 4 (0.125/2) (|*| gain "0.9")) $
sound (samples "{[n4/2 n4] n4*2 n4*4 [n4 n4/2] ~}%4" "{[0 5] [1 2] [2 0]*2 [1 4] ~}%4")
|+| cut "-1" # speed "1" |+| gain "0",
sound (samples "444" (slow 8 $ run 8)),
sound (samples "{~ [~ ~ ~ 444z] ~ ~ ~}%4" (run 23)) # delay "0.5"
|+| cutoff (scale 0.01 0.2 $ slow 3 sine1) |+| resonance "0.2" |+| gain "0" ]
|=| delaytime "0.45" |=| delayfeedback "0.4"












-- 2 (slip)
bps (180/120)

d1 $ every 5 (spike') 4
every 6 ((|+| coarse "16 32 24")) $
every 7 (gap 4) $
every 4 (chop 4) $
stack [
sound "llama*8?" |+| end "0.02",
slowcat [sound (samples "kit6*8" (irand 30)),
sound (samples "kit7*8" (irand 30)),
sound (samples "kit7*9" (irand 30)),
sound (samples "kit8*8" (irand 30)) ],
degradeBy 0.6 $ sound (samples "b18b*8" "[0 1]/8") |+| cut "1",
whenmod 5 3 (ghost) $ sound "kit1/2 teks [~ teks] ~"]

hush


-- 3 (443)
bps (100/120)

-- 1m 2.3
m $ (|+| note "45") $ (|+| note "[0 0 0 [-24 0]]") $
mel m13 5 "[0 0 [~ 0] [0/2 0]]"

brute $ whenmod 8 4 (|+| note "-2") $ stut' 2 (0.125/2) (|+| note "[12 -12 -24]*5") $ (|+| note "84") $
note "{~ ~ 0 [~ -1] [~ -5] ~ ~ -5 [-8 -5] ~}%4"

d1 $ foldEvery [3,4] (0.25 <~) $
jux (iter 4) $
every 6 (smash 3 [2,1,3]) 4
every 5 (|=| speed "0.8 1.25") $
rarely (stut' 4 (0.125/4) (|*| gain "0.9")) $
every 3 (stut' 1 (0.125/4*3) (|*| gain "0.95")) $ foldEvery [3,4] (1.25 <~) $ every 6 (gtfo) $
sound (samples "{n1*2 [~ n1] n1*4 ~ [n1 n1*2] [~ n1] n1 ~}%4" "{[0 2] 2 [1 3 4 5] ~ [5 3] 0 1 ~}%4")

d2 $ sound "~ ~ ~ cpr/3" |+| coarse "{16 32 64}%4" |+| speed "0.8"


hush

m silence
brute silence



-- if necessary...
d2 $ stack [
sound (samples "443b" (slow 4 $ run 4)) |+| gain "1.2",
sound (samples "[~ 443] 443 443 [~ 443]" (density 1.41 $ run 21))]

d3 $ density 2 $ sound (samples "{~ ~ 443z [~ 443z] [~ 443z] ~ ~ 443z [443z 443z] ~}%4" (irand 39))































-- KINDOHM
-- If you like what you see and hear, stay in touch and stay updated:
-- kindohm.com | @kindohm | facebook.com/kindohm | snapchat: kindohm
-- next gig January 7th 9pm @ The Nicollet

bps (105/100)

d1 $ spike' $
smash 3 [3,2,1] $
every 5 (|+| coarse "8 16 24") $
whenmod 7 4 (jux (iter 4)) $
every 6 (gap 4) $
every 8 (chop 4) $
every 9 (rip 0.2 0.1) $
foldEvery [3,4] (0.25 <~) $ stack [
sound "[~ sub/2] ~ ~ ~",
sound "ch*8",
(0.25 <~) $ density 2 $ sound "k:8(3,8)",
density 2 $ sound "sna(3,8)"] |+| shape "0.2"

hush


-- hey everybody thanks for listening!!!!
-- Jan 7 @ The Nicollet @ 9pm
-- kindohm.com | @kindohm


hush



























-- 4 (wreck)

bps (190/120)

brute $ every 3 (slow 2) $ slow 2 $
note (preplace(1,3) "{1 [~ 1] ~ 1*1 ~ ~ ~ 1*2 ~}%8" ((+56) <$> (foldEvery [2,3] ((subtract 12) <$>)) "0 2 -1 0 4 12 -3 5 0 14 2"))
|+| dur "{0.1 0.2 0.05 0.1 0.2}%8"

-- 1M 2.5
m $ slow 18 $
note ((+56) <$> (foldEvery [2,3] ((+12) <$>)) "[{0 -5 -3 -8 -2}%4, {0 5 7 -2 9 11 14}%4, {4 0 12 11 9 5}%4]") |+| dur "4"

-- kit10
d1 $
stack [
stut' 4 (0.125) (|*| speed "1.2") $ jux (iter 8) $ sound "~ cp",
sound "[vixcy/4, vixbt/4]" |+| shape "0.3",
sound "~ ~ ~ sea/4",
foldEvery [2,3,4] (density (4/3)) $ jux (iter 16) $
sound "vixch*8" |+| gain "0.8" |+| speed "[1 2 0.5 0.25]/4" ]
hush
m silence
brute silence

-- 5 (defrag)
bps (210/120)

-- a
d1 $ stack [
slow 8 $ sound (samples "defb*4" "[0 1 2 2]") |=| speed "1 1 1 [1 0.5]/2",
slow 16 $ sound "gnarl gnarl:1",
slow 2 $ sound "~ ~ defdo defdo:1" ]

-- b
d1 $ stack [
slow 8 $ sound (samples "defb*4" "[3 4 5 5 3 6 5 5]/2"),
slow 16 $ sound "gnarl:2 gnarl:3",
slow 2 $ sound "~ ~ defdo defdo:1" ]

d2 $ whenmod 11 8 (iter 4) $
degrade $ every 5 (gap 4) $
every 6 (chop 4) $
every 7 (rip' 0 1 8 0.2 0.1) $
every 8 (spike') $
whenmod 7 5 (|+| speed "1.5") $
whenmod 6 4 (jux (iter 4)) $
stack [slow 2 $ sound "kl:1(3,8) defs" |+| gain "0.9 1",
ghost $ sound "~ cp [~ cp] ~",
slowcat [sound (samples "akuma1*8" (irand 30)) |+| unit "c" |+| speed "8",
sound (samples "teeny1*8" (irand 30)) |+| unit "c" |+| speed "8",
sound (samples "akuma2*8" (irand 30)) |+| unit "c" |+| speed "8"],
rarely (degrade . (density 2)) $ slow 2 $ slowcat [
sound (samples "defkit1*16" (irand 20)) |+| end "0.25" |+| speed "{1 2 1.5}%16",
sound (samples "defkit2*16" (irand 20)) |+| end "0.25" |+| speed "{1 2 1.5}%16"]]

d2 silence
d1 silence

hush

--6 (melts)
bps (150/120)

d1 $ whenmod 7 4 (|+| accelerate (scale 0 1 $ rand)) $
foldEvery [3,4] (0.25 <~) $
whenmod 7 5 (jux (iter 4)) $
every 5 (|+| coarse "16 24 32") $
stack [
sound "{run ~ ~}%8" |+| gain "0.8",
sound "{8ch*8 ~ ~}%2" |+| gain "0.9",
sound "~ ride" |+| gain "0.9" |+| speed "[1 -1]/3" |+| delay "0.5",
stut 4 0.25 0.25 $ sound "k*4? stite",
slow 4 $ sound (samples "fk*16 ~" (run 30)),
stut' 3 (0.125/2) (|*| gain "0.9") $
sound "~ teks [~ teks] ~",
whenmod 8 4 (const $ sound (samples "peri*16?" (irand 40)) |+| speed "2" |+| end "0.2") $
sound (samples "keys2*8?" (irand 30)) |+| delay "0.4",
(whenmod 7 5 (const $ slowspread (striate) [64, 128, 512, 300] $ (|=| delay "0.2") $ sound "~ bor") $
whenmod 12 8 (|=| up "-2") $ sound "~ bor" |=| cut "10" |=| up "0")
|=| gain "0.9",
slow 2 $ sound "vocad" |=| up "-12" |=| gain "0.95" |=| cut "2" |=| delay "0.2" ]
|=| delaytime "0.7" |=| delayfeedback "0.4" |+| shape "0.2"

hush



--7 (pat)
bps (200/120)

let pat = "{0 0*2 [~ 0] [~ 0] ~ [1 -1]/2 ~ 0*2 ~}%4"

d1 $ every 12 (const $ sound "loon") $
foldEvery [3,4] (0.25 <~) $
every 5 (rip 0.2 0.1) $
every 6 (chop 4) $
whenmod 10 8 (spike') $
stack [
sound "loon*8?" |+| cut "3" |+| end "0.1",
up pat |=| sound "k" |+| cut "-1",
foldEvery [2,3,4] (density 2) $ sound "8ch*4",
slow 2 $ sound (samples "fk*8 ~" (run 30)) |+| shape "0.3",
sound "{~ s ~ ~ ~}%4",
stut 4 0.25 0.25 $ sound "~ cp",
slowcat [
sound (samples "brk2*8?" (irand 30)) |+| speed "8" |+| unit "c" |+| shape "0.3",
sound (samples "brk3*8?" (irand 30)) |+| speed "8" |+| unit "c" |+| shape "0.3",
sound (samples "brk1*8?" (irand 30)) |+| speed "8" |+| unit "c" |+| shape "0.3"],
ghost $ sound "~ teks [~ teks] ~",
whenmod 8 4 (|=| speed "0.9") $
up pat |=| sound "[nov1:11 nyanx2 b:7 nyanx1]/7" |+| cut "-1"]

hush
-- nyanx0/nyanx1
-- b3
-- nov1:6,11,12,13
-- b:*

brute silence
m silence
