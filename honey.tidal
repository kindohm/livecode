-- templates because reasons
-- k16 $ note ((+33) <$> "0")
-- k16 $ note (preplace(1,1) "1*4" ((+33) <$> "0"))

-- boilerplate code.
let rip a b p = within (0.25, 0.75) (slow 2 . rev . stut 8 a b) p
let rip' a b c d e p = within (a, b) (slow 2 . rev . stut c d e) p
let up = speed . ((1.059466**) <$>)
let screw = slowspread ($) [id, rev, (|+| accelerate "-0.5 0.5"), (|+| coarse "32 64 16"), rip 0.2 0.1, gap 4, (|+| unit "c"), rip' 0 1 8 0.2 0.1, (|+| speed "1.2 1.5 -1.2 0.8")]
import Sound.Tidal.MIDI.Output
import Sound.Tidal.SimpleSynth
keyStreams <- keyproxy 1 "Scarlett 18i8 USB" keys [2]
[volca] <- sequence keyStreams
keyStreams2 <- keyproxy 1 "MiniBrute" keys [1]
[brute] <- sequence keyStreams2

-- legato, w d/r
bps (70/120)
brute $ slow 2 $ note ((+45) <$> (whenmod 4 2 ((subtract 2) <$> )) ("0 ~ ~ [16 16 28]/3 0 ~ ~ [14 24]/2"))

-- more hip hoppy
bps (80/120)
brute $ note ((+45) <$> ("[0 12 ~ ~] [~ [3 15]] ~ [8 20 ~ ~] [~ [0 12]] ~ [3 15 ~ ~] [~ [7 19]]"))

-- let's dance or something
bps (120/120)
brute $ note (preplace (1,1) "[~ 1]*2 [~ 1 1 1] ~ ~" ((+45) <$> (("0 2 -1"))))

-- A++++ would make again! :thumbsup:
bps(130/120) -- legato, vib, glid
brute $ note ( preplace(1,16) "{1*2 [~ 1]*2 1 1 [~ 1]}%2"
((+45) <$> (whenmod 16 12 ((+12) <$>) <$> whenmod 8 4 ((+12) <$>) <$> every 3 (rev) <$>
within (0.25, 0.5) (negate <$>)) ("0 4 0 2 7 5 -2")))

bps (140/120)
brute $ note "{45 ~ ~}%8"

-- acidish
brute $ note (preplace(1,4) "1*16" ((+33) <$> (slowcat ["[0 -2] 5 7 9", "[0 -2] 5 7 9", "[-2 -4] 7 5 3", "[-4 -6] 10 8 6"])))

-- legato
bps (120/120)
brute $ slow 4 $ note ((+48) <$> ("0 ~ ~ 12 7 ~ ~ 16 0 ~ ~ 12 7 ~ ~ 23"))

-- save this one for later
bps (190/120)
brute $ note (preplace (1,8) "{1 ~ 1 ~ ~}%4" ((+33) <$> (("0 3 2 5 3 8 7 -2"))))
